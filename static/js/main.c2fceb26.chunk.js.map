{"version":3,"sources":["components/calculator/Calculator.js","components/calculator/Calculotor.style.js","components/buttons/ButtonsList.styles.js","components/buttons/ButtonsList.js","components/display/Display.style.js","components/display/Display.js","GlobalStyle.js","App.js","index.js"],"names":["Calculator","useState","display","setDisplay","formula","setFormula","lastPressed","useRef","handleInput","value","type","current","console","log","replace","result","eval","toString","className","buttons","id","Warapper","styled","div","Grid","Button","button","ButtonsList","map","onClick","Container","Value","p","Result","Display","GlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q3BAMMA,WAAa,SAAbA,aAEF,cAA8BC,oDAAS,KAAvC,6LAAOC,QAAP,cAAgBC,WAAhB,cACA,WAA8BF,oDAAS,IAAvC,8LAAOG,QAAP,cAAgBC,WAAhB,cACMC,YAAcC,kDAAO,IAErBC,YAAc,SAAdA,YAAeC,MAAOC,MAExB,GAAa,UAATA,KACAP,WAAW,KACXE,WAAW,SAGV,GAAgB,MAAZD,QAAiB,CACtB,GAAY,MAARK,MAAc,OAEdJ,WAAWI,YAKd,GAAa,YAATC,MAA4C,YAAtBJ,YAAYK,QAEzB,MAAVF,OACAG,QAAQC,KAAK,GACbV,WAAWM,OACXJ,WAAWD,QAAQK,SAGtBN,WAAWM,OACXJ,WAAWD,QAAQU,QAAQ,WAAYL,aAIvC,IAAa,YAATC,MAA8C,YAAxBJ,YAAYK,QACvC,OAGC,GAAa,UAATD,KAAkB,CACvB,IAAIK,OAASC,KAAKZ,SAASa,WAC3Bd,WAAWY,QACXV,WAAWU,QACXT,YAAYK,QAAUD,SAGM,UAAvBJ,YAAYK,SAA+B,YAATD,MACvCP,WAAWD,SACXG,WAAWH,QAAQO,SAInBN,WAAWM,OACXJ,WAAWD,QAAQK,OACnBH,YAAYK,QAAUD,QAM9B,OACI,4DAAC,iDAAD,CAAUQ,UAAU,WAApB,UACC,2DAAC,gDAAD,CAAShB,QAASA,QAASE,QAASA,UACpC,2DAAC,oDAAD,CAAae,QAASA,QAASX,YAAaA,kBAO/CW,QAAQ,CACV,CACCV,MAAO,IACPW,GAAI,OACJV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAI,MACJV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,MACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,QACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,OACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,OACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,MACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,QACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,QACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAG,OACHV,KAAM,UAEP,CACCD,MAAO,IACPW,GAAI,MACJV,KAAM,WAEP,CACCD,MAAM,IACNW,GAAG,WACHV,KAAM,WAEP,CACCD,MAAM,IACNW,GAAG,WACHV,KAAM,WAEP,CACCD,MAAM,IACNW,GAAG,SACHV,KAAM,WAEP,CACCD,MAAM,IACNW,GAAG,SACHV,KAAK,SAEN,CACCD,MAAM,IACNW,GAAG,UACHV,KAAK,WAEN,CACCD,MAAM,KACNW,GAAG,QACHV,KAAM,UAMIV,kC,+ECnKFqB,E,KAAWC,EAAOC,IAAV,+D,2DCARC,EAAOF,IAAOC,IAAV,0BAEJE,EAASH,IAAOI,OAAV,0B,OCcJC,IAfK,SAAC,GAA4B,IAA3BR,EAA0B,EAA1BA,QAASX,EAAiB,EAAjBA,YAC3B,OACI,cAACgB,EAAD,UACKL,EAAQS,KAAI,SAAAF,GAAM,OACf,cAACD,EAAD,CAEIL,GAAIM,EAAON,GACXS,QAAW,kBAAOrB,EAAYkB,EAAOjB,MAAOiB,EAAOhB,OAHvD,SAKEgB,EAAOjB,OAJAiB,EAAON,W,6DCNnBU,EAAYR,IAAOC,IAAV,0BAETQ,EAAQT,IAAOU,EAAV,0BAELC,EAASX,IAAOU,EAAV,0B,OCKHE,IATC,SAAC,GAAwB,IAAvBhC,EAAsB,EAAtBA,QAASE,EAAa,EAAbA,QACvB,OACI,eAAC0B,EAAD,CAAWV,GAAG,UAAd,UACG,cAACa,EAAD,UAAS7B,IACR,cAAC2B,EAAD,UAAQ7B,S,yHCJRiC,E,KAAcb,EAAOC,IAAV,yJ,OCWTa,MATf,WACE,OACE,sBAAKlB,UAAU,MAAf,UACA,cAACiB,EAAD,IACA,cAACnC,EAAA,EAAD,QCFJqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2fceb26.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport ButtonsList from '../buttons/ButtonsList';\r\nimport Display from '../display/Display';\r\nimport { Warapper } from './Calculotor.style';\r\n\r\n\r\nconst Calculator = () => {\r\n    \r\n    const [display, setDisplay] = useState('0');\r\n    const [formula, setFormula] = useState('');\r\n    const lastPressed = useRef('')\r\n\r\n    const handleInput = (value, type) => {\r\n        //Clear and Initita the states \r\n        if (type === 'clear') {\r\n            setDisplay('0');\r\n            setFormula('');\r\n        } \r\n        //to prevent multipule zeros at the starts\r\n        else if (formula === \"0\") {\r\n            if (value===\"0\"){ return;}\r\n            else {\r\n                setFormula(value)\r\n            }\r\n            \r\n        }\r\n        //in case, 2 or more operators are entered consecutively\r\n        else if (type === 'opertor' && lastPressed.current==='opertor') {\r\n            //exclude the minus from the rule\r\n            if (value === \"-\") {\r\n                console.log(-1)\r\n                setDisplay(value);\r\n                setFormula(formula+value);\r\n            //for the other opertors\r\n            } else {\r\n             setDisplay(value);\r\n             setFormula(formula.replace(/[-+*\\/]$/, value))\r\n            }\r\n        }\r\n        //prevent more than one decimal point\r\n        else if (type === 'decimal' && lastPressed.current === 'decimal') {\r\n            return;\r\n        }\r\n        //evalute the result\r\n        else if (type === \"equal\") {\r\n            let result = eval(formula).toString();\r\n            setDisplay(result);\r\n            setFormula(result);\r\n            lastPressed.current = type\r\n        }\r\n        //start a new calculation that operates on the result of the previous evaluation\r\n        else if (lastPressed.current ===\"equal\" && type === \"opertor\") {\r\n            setDisplay(display);\r\n            setFormula(display+value)\r\n        }\r\n        //display values and the formula\r\n        else {\r\n            setDisplay(value);\r\n            setFormula(formula+value);\r\n            lastPressed.current = type\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return ( \r\n        <Warapper className=\"warapper\">\r\n         <Display display={display} formula={formula} />\r\n         <ButtonsList buttons={buttons} handleInput={handleInput}/>\r\n        </Warapper>      \r\n     );\r\n}\r\n\r\n//Array of buttons\r\n\r\nconst buttons=[\r\n    {\r\n     value: \"0\",\r\n     id: \"zero\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"1\",\r\n     id: \"one\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"2\",\r\n     id:\"two\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"3\",\r\n     id:\"three\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"4\",\r\n     id:\"four\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"5\",\r\n     id:\"five\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"6\", \r\n     id:\"six\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"7\",\r\n     id:\"seven\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"8\", \r\n     id:\"eight\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"9\",\r\n     id:\"nine\",\r\n     type: \"number\"\r\n    },\r\n    {\r\n     value: \"+\",\r\n     id: \"add\",\r\n     type: \"opertor\"\r\n    },\r\n    {\r\n     value:\"-\",\r\n     id:\"subtract\",\r\n     type: \"opertor\"\r\n    },\r\n    {\r\n     value:\"*\",\r\n     id:\"multiply\",\r\n     type: \"opertor\"\r\n    },\r\n    {\r\n     value:\"/\",\r\n     id:\"divide\",\r\n     type: \"opertor\"\r\n    },\r\n    {\r\n     value:\"=\",\r\n     id:\"equals\",\r\n     type:\"equal\"\r\n    },\r\n    {\r\n     value:\".\",\r\n     id:'decimal',\r\n     type:\"decimal\"\r\n    },\r\n    {\r\n     value:\"AC\",\r\n     id:\"clear\",\r\n     type: \"clear\"\r\n    }\r\n\r\n];\r\n\r\n\r\nexport default Calculator;","import styled from \"styled-components\";\r\n\r\nexport const Warapper = styled.div`\r\nmax-width: 50%;\r\nmargin: O auto;\r\n`","import styled from \"styled-components\";\r\n\r\nexport const Grid = styled.div``;\r\n\r\nexport const Button = styled.button``;\r\n\r\n","import React from 'react';\r\nimport { Button, Grid } from './ButtonsList.styles';\r\n\r\nconst ButtonsList = ({buttons, handleInput}) => {\r\n    return ( \r\n        <Grid>\r\n            {buttons.map(button => (\r\n                <Button \r\n                    key={button.id} \r\n                    id={button.id}\r\n                    onClick = {() =>  handleInput(button.value, button.type)}\r\n                    \r\n                >{button.value}</Button>\r\n            ))}\r\n        </Grid>\r\n     );\r\n}\r\n \r\nexport default ButtonsList;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div``;\r\n\r\nexport const Value = styled.p``;\r\n\r\nexport const Result = styled.p``","import React from 'react';\r\nimport { Container, Result, Value } from './Display.style';\r\n const Display = ({display, formula}) => {\r\n     return ( \r\n         <Container id=\"display\">\r\n            <Result>{formula}</Result>\r\n             <Value>{display}</Value>\r\n         </Container>\r\n      );\r\n }\r\n  \r\n export default Display;","import styled from \"styled-components\";\r\n\r\nexport const GlobalStyle = styled.div`\r\n * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    width:100%;\r\n    min-height: 100vh;\r\n}\r\n`","import Calculator from \"./components/calculator/Calculator\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <GlobalStyle />\n    <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}